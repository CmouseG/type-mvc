{"version":3,"sources":["di/Injector.ts"],"names":[],"mappings":";;AAAA,4BAA0B;AAIb,QAAA,SAAS,GAAG,IAAI,MAAM,EAAE,CAAC;AAEtC;;GAEG;AACH;IAAA;IAYA,CAAC;IAAD,eAAC;AAAD,CAZA,AAYC;AAXU,iBAAQ,GAAG,iBAAS,CAAC;AACrB,aAAI,GAAa,IAAI,YAAY,EAAE,CAAC;AAFzB,4BAAQ;AAe9B;IACI,wBAAsB,IAAY;QAAZ,SAAI,GAAJ,IAAI,CAAQ;IAClC,CAAC;IAED,iCAAQ,GAAR;QACI,MAAM,CAAC,oBAAkB,IAAI,CAAC,IAAM,CAAC;IACzC,CAAC;IACL,qBAAC;AAAD,CAPA,AAOC,IAAA;AAPY,wCAAc;AAS3B;IAAA;IAOA,CAAC;IANG,0BAAG,GAAH,UAAI,KAAU,EAAE,aAA8B;QAA9B,8BAAA,EAAA,iCAA8B;QAC1C,EAAE,CAAC,CAAC,aAAa,KAAK,iBAAS,CAAC,CAAC,CAAC;YAC9B,MAAM,IAAI,KAAK,CAAC,qBAAmB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAG,CAAC,CAAC;QACjE,CAAC;QACD,MAAM,CAAC,aAAa,CAAC;IACzB,CAAC;IACL,mBAAC;AAAD,CAPA,AAOC,IAAA","file":"../../di/Injector.js","sourcesContent":["import 'reflect-metadata';\r\nimport { Type } from '../type';\r\n\r\n\r\nexport const NOT_FOUND = new Object();\r\n\r\n/**\r\n * injector container.\r\n */\r\nexport abstract class Injector {\r\n    static notFound = NOT_FOUND;\r\n    static NULL: Injector = new NullInjector();\r\n\r\n    /**\r\n     * Retrieves an instance from the injector based on the provided token.\r\n     * If not found:\r\n     * - Throws {@link NoProviderError} if no `notFoundValue` that is not equal to\r\n     * Injector.THROW_IF_NOT_FOUND is given\r\n     * - Returns the `notFoundValue` otherwise\r\n     */\r\n    abstract get<T>(token: Type<T> | InjectionToken<T>, notFoundValue?: T): T;\r\n}\r\n\r\n\r\nexport class InjectionToken<T> {\r\n    constructor(protected desc: string) {\r\n    }\r\n\r\n    toString(): string {\r\n        return `InjectionToken ${this.desc}`;\r\n    }\r\n}\r\n\r\nclass NullInjector implements Injector {\r\n    get(token: any, notFoundValue: any = NOT_FOUND): any {\r\n        if (notFoundValue === NOT_FOUND) {\r\n            throw new Error(`No provider for ${JSON.stringify(token)}!`);\r\n        }\r\n        return notFoundValue;\r\n    }\r\n}\r\n"]}