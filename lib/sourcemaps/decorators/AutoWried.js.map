{"version":3,"sources":["decorators/AutoWried.ts"],"names":[],"mappings":";AAAA,mBAA0B,MAAgB;IACtC,IAAI,0BAA0B,GAC1B,OAAO,CAAC,cAAc,CAAC,eAAe,EAAE,MAAM,CAAC,IAAI,EAAE,CAAC;IAC1D,IAAI,cAAc,CAAC;IACnB,EAAE,CAAC,CAAC,0BAA0B,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;QACxC,0BAA0B,CAAC,OAAO,EAAE,CAAC;QACrC,IAAM,YAAU,GACZ,OAAO,CAAC,WAAW,CAAC,mBAAmB,EAAE,MAAM,CAAC,CAAC;QACrD,cAAc,GAAG,eAAe,CAAC,mBAAmB,CAAC;YAAS,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YACxE,YAAY,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,OAAO,GAAe,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,KAAK,EAAO,CAAC;YAClE,GAAG,CAAC,CAAc,UAA0B,EAA1B,yDAA0B,EAA1B,wCAA0B,EAA1B,IAA0B;gBAAvC,IAAI,KAAK,mCAAA;gBACV,EAAE,CAAC,CAAC,KAAK,IAAI,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;oBAC1B,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,YAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACtD,CAAC;aACJ;YACD,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YAC5B,YAAY,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC,EAAE,MAAM,CAAC,CAAC;IACf,CAAC;IACD,IAAI,CAAC,CAAC;QACF,cAAc,GAAG,eAAe,CAAC,mBAAmB,CAAC;YAAS,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YACxE,YAAY,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;YACxC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACzB,YAAY,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC,EAAE,MAAM,CAAC,CAAC;IACf,CAAC;IACD,IAAI,MAAM,GAA2B,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAA;IAC9D,MAAM,CAAC,aAAa,CAAC,cAAc,CAAC,CAAC;IACrC,MAAM,CAAC,cAAc,CAAC;AAC1B,CAAC;AA9BD,8BA8BC","file":"../../decorators/AutoWried.js","sourcesContent":["export function AutoWired(target: Function) {\r\n    let existingInjectedParameters: number[] =\r\n        Reflect.getOwnMetadata(\"params_inject\", target) || [];\r\n    let newConstructor;\r\n    if (existingInjectedParameters.length > 0) {\r\n        existingInjectedParameters.reverse();\r\n        const paramTypes: Array<any> =\r\n            Reflect.getMetadata(\"design:paramtypes\", target);\r\n        newConstructor = InjectorHanlder.decorateConstructor(function(...args: any[]) {\r\n            IoCContainer.assertInstantiable(target);\r\n            let newArgs: Array<any> = args ? args.concat() : new Array<any>();\r\n            for (let index of existingInjectedParameters) {\r\n                if (index >= newArgs.length) {\r\n                    newArgs.push(IoCContainer.get(paramTypes[index]));\r\n                }\r\n            }\r\n            target.apply(this, newArgs);\r\n            IoCContainer.applyInjections(this, target);\r\n        }, target);\r\n    }\r\n    else {\r\n        newConstructor = InjectorHanlder.decorateConstructor(function(...args: any[]) {\r\n            IoCContainer.assertInstantiable(target);\r\n            target.apply(this, args);\r\n            IoCContainer.applyInjections(this, target);\r\n        }, target);\r\n    }\r\n    let config: ConfigImpl = <ConfigImpl>IoCContainer.bind(target)\r\n    config.toConstructor(newConstructor);\r\n    return newConstructor;\r\n}\r\n"]}